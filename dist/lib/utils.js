"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const soap = require("soap");
/**
 * Helper method that wraps the creation of a WSDL client within a Promise and
 * adds the typed interfaces generated by wsdl-to-ts.
 */
function createClient(wsdlUri, options) {
    return new Promise((resolve, reject) => {
        soap.createClient(wsdlUri, options, (err, client) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(client);
            }
        });
    });
}
exports.createClient = createClient;
/**
 * Converts a SoapMethodCB into a SoapMethodPromise
 */
function promisifySoapMethod(f) {
    return (input) => new Promise((resolve, reject) => {
        f(input, (err, result) => {
            if (err) {
                return reject(err);
            }
            resolve(result);
        });
    });
}
exports.promisifySoapMethod = promisifySoapMethod;
function readWsdl(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.readFile(path, { encoding: "UTF-8" }, (err, wsdl) => {
                if (err) {
                    return reject(err);
                }
                resolve(wsdl);
            });
        });
    });
}
exports.readWsdl = readWsdl;
//# sourceMappingURL=utils.js.map