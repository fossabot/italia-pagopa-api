import * as soap from "soap";
/**
 * Helper method that wraps the creation of a WSDL client within a Promise and
 * adds the typed interfaces generated by wsdl-to-ts.
 */
export declare function createClient<T>(
  wsdlUri: string,
  options: soap.IOptions
): Promise<soap.Client & T>;
export declare type SoapMethodCB<I, O> = (
  input: I,
  cb: (
    err: any | null,
    result: O,
    raw: string,
    soapHeader: {
      [k: string]: any;
    }
  ) => any
) => void;
export declare type SoapMethodPromise<I, O> = (input: I) => Promise<O>;
/**
 * Converts a SoapMethodCB into a SoapMethodPromise
 */
export declare function promisifySoapMethod<I, O>(
  f: SoapMethodCB<I, O>
): SoapMethodPromise<I, O>;
export declare function readWsdl(path: string): Promise<string>;
